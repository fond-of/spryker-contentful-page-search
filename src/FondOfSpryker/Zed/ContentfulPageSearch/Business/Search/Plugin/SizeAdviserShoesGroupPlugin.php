<?php

namespace FondOfSpryker\Zed\ContentfulPageSearch\Business\Search\Plugin;

use FondOfSpryker\Zed\ContentfulPageSearch\Business\Search\ContentfulPageSearchWriterPluginInterface;
use Orm\Zed\Contentful\Persistence\FosContentful;
use Orm\Zed\ContentfulPageSearch\Persistence\FosContentfulPageSearch;

class SizeAdviserShoesGroupPlugin extends AbstractEntryTypePlugin implements ContentfulPageSearchWriterPluginInterface
{
    private $entryTypeId = 'sizeAdviserShoesGroup';

    /**
     * @return string
     */
    public function getEntryTypeId(): string
    {
        return $this->entryTypeId;
    }

    /**
     * @param \Orm\Zed\Contentful\Persistence\FosContentful $contentfulEntity
     * @param \Orm\Zed\ContentfulPageSearch\Persistence\FosContentfulPageSearch $contentfulPageSearchEntity
     *
     * @return void
     */
    public function extractEntry(FosContentful $contentfulEntity, FosContentfulPageSearch $contentfulPageSearchEntity): void
    {
        $storageEntry = $this->storageFacade->get($contentfulEntity->getStorageKey());

        $relatedEntries = $this->extractFieldItemsReference($storageEntry);

        dump($relatedEntries);

        $this->store($contentfulEntity, $contentfulPageSearchEntity);
    }

    /**
     * @return void
     */
    private function extractFieldItemsReference(array $storageEntry)
    {
        $items = [];

        foreach ($storageEntry['fields']['items']['value'] as $field) {
            if ($field['type'] === static::FIELD_TYPE_REFERENCE) {
                array_push($items, $this->getRelatedItemEntryId($field['value']));
            }
        }

        return $items;
    }

    /**
     * @param string $entryId
     *
     * @return string|null
     */
    protected function getRelatedItemEntryId(string $entryId): ?string
    {
        /** @var \Orm\Zed\Contentful\Persistence\FosContentful[] $storageEntries */
        $storageEntries = $this->contentfulQuery->filterByEntryId(strtolower($entryId));

        foreach ($storageEntries as $entry) {
            return $entry->getEntryId();
        }

        return null;
    }

    /**
     * @return void
     */
    protected function store(FosContentful $contentfulEntity, FosContentfulPageSearch $contentfulPageSearchEntity, ?array $data = null)
    {
        parent::store($contentfulEntity, $contentfulPageSearchEntity); // TODO: Change the autogenerated stub
    }
}
